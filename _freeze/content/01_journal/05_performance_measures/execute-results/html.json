{
  "hash": "234e377fe66ef5f791b6ab0e8a95fd4d",
  "result": {
    "markdown": "---\ntitle: \"Performance Measures\"\nauthor: \"Tommy Weber\"\n---\n\n\n### Repeat of last Challenge\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-1_6fa713751213badfb946a6cd45c0bf36'}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\nlibrary(cowplot)\nlibrary(glue)\n\nh2o.init()\nset.seed(seed = 1113)\n\ntheme_new <- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),,\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n)\n\nproduct_backorder_tbl <- read.csv(\"../../../product_backorders.csv\")\n\nsplit_obj <- rsample::initial_split(product_backorder_tbl, prop = 0.85)\n\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl <- testing(split_obj)\n\nrecipe_obj <- recipe(went_on_backorder ~ ., data = train_readable_tbl) %>% \n  update_role(sku, new_role = \"ID\") %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(all_nominal(), fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl <- bake(recipe_obj, new_data = test_readable_tbl)\n\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o <- as.h2o(test_tbl)\n\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), c(y, \"sku\"))\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  validation_frame = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs = 30,\n  nfolds = 5\n)\n```\n:::\n\n\n---\n\n### 1. Leaderboard Visualization\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-2_20bba0b78590491bee4e08ddebd10c5f'}\n\n```{.r .cell-code}\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n  \n  # Setup inputs\n  # adjust input so that all formats are working\n  order_by <- tolower(order_by[[1]])\n  \n  leaderboard_tbl <- h2o_leaderboard %>%\n    as_tibble() %>%\n    select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n    mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n    rownames_to_column(var = \"rowname\") %>%\n    mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n  \n  # Transformation\n  if (order_by == \"auc\") {\n    \n    data_transformed_tbl <- leaderboard_tbl %>%\n      slice(1:n_max) %>%\n      mutate(\n        model_id   = as_factor(model_id) %>% reorder(auc),\n        model_type = as.factor(model_type)\n      ) %>%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else if (order_by == \"logloss\") {\n    \n    data_transformed_tbl <- leaderboard_tbl %>%\n      slice(1:n_max) %>%\n      mutate(\n        model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n        model_type = as.factor(model_type)\n      ) %>%\n      pivot_longer(cols = -c(model_id, model_type, rowname), \n                   names_to = \"key\", \n                   values_to = \"value\", \n                   names_transform = list(key = forcats::fct_inorder)\n      )\n    \n  } else {\n    # If nothing is supplied\n    stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n  }\n  \n  # Visualization\n  g <- data_transformed_tbl %>%\n    ggplot(aes(value, model_id, color = model_type)) +\n    geom_point(size = size) +\n    facet_wrap(~ key, scales = \"free_x\") +\n    labs(title = \"Leaderboard Metrics\",\n         subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n         y = \"Model Postion, Model ID\", x = \"\")\n  \n  if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                           hjust = \"inward\"))\n  \n  return(g)\n  \n}\n\nautoml_models_h2o@leaderboard %>% plot_h2o_leaderboard()\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n---\n\n### 2. Tune a Model with Grid Search\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-3_4440cb4d24ce0750663bbc1f689e3896'}\n\n```{.r .cell-code}\ndeeplearning_h2o <- h2o.loadModel(\"../../my_models/PerfMeasures_Models/DeepLearning_1_AutoML_4_20230610_121831\")\n\nh2o.performance(deeplearning_h2o, newdata = test_h2o)\n\ndeeplearning_grid_01 <- h2o.grid(\n  \n  # See help page for available algos\n  algorithm = \"deeplearning\",\n  \n  # I just use the same as the object\n  grid_id = \"deeplearning_grid_01\",\n  \n  # The following is for ?h2o.deeplearning()\n  # predictor and response variables\n  x = x,\n  y = y,\n  \n  # training and validation frame and crossfold validation\n  training_frame   = train_h2o,\n  validation_frame = valid_h2o,\n  nfolds = 5,\n  \n  # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n  hyper_params = list(\n    # Use some combinations (the first one was the original)\n    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n    epochs = c(10, 50, 100)\n  )\n)\n```\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-4_0e8bbf6233ae8c280eaaf20019483b5b'}\n\n```{.r .cell-code}\ndeeplearning_grid_01@summary_table\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"epochs\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hidden\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"model_ids\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"logloss\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"101.43374\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_12\",\"4\":\"0.2487621\"},{\"1\":\"101.40119\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_15\",\"4\":\"0.2500432\"},{\"1\":\"101.43447\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_30\",\"4\":\"0.2527100\"},{\"1\":\"101.40579\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_21\",\"4\":\"0.2532142\"},{\"1\":\"51.99130\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_20\",\"4\":\"0.2557874\"},{\"1\":\"101.40654\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_27\",\"4\":\"0.2574896\"},{\"1\":\"101.40104\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_18\",\"4\":\"0.2613339\"},{\"1\":\"101.41925\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_6\",\"4\":\"0.2617335\"},{\"1\":\"101.39076\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_33\",\"4\":\"0.2627297\"},{\"1\":\"101.40993\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_3\",\"4\":\"0.2643607\"},{\"1\":\"52.01092\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_32\",\"4\":\"0.2643733\"},{\"1\":\"51.98179\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_8\",\"4\":\"0.2645095\"},{\"1\":\"51.99549\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_14\",\"4\":\"0.2647786\"},{\"1\":\"51.97256\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_17\",\"4\":\"0.2648704\"},{\"1\":\"52.01430\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_11\",\"4\":\"0.2673598\"},{\"1\":\"101.39955\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_9\",\"4\":\"0.2677009\"},{\"1\":\"52.01204\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_2\",\"4\":\"0.2689013\"},{\"1\":\"51.97609\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_26\",\"4\":\"0.2689427\"},{\"1\":\"101.37628\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_24\",\"4\":\"0.2692591\"},{\"1\":\"51.99912\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_29\",\"4\":\"0.2711987\"},{\"1\":\"101.41131\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_36\",\"4\":\"0.2722193\"},{\"1\":\"52.02344\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_5\",\"4\":\"0.2756006\"},{\"1\":\"51.99689\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_35\",\"4\":\"0.2797186\"},{\"1\":\"51.99867\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_23\",\"4\":\"0.2821359\"},{\"1\":\"10.40355\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_22\",\"4\":\"0.2994757\"},{\"1\":\"10.40990\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_31\",\"4\":\"0.3044266\"},{\"1\":\"10.38718\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_1\",\"4\":\"0.3063202\"},{\"1\":\"10.39779\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_4\",\"4\":\"0.3080904\"},{\"1\":\"10.40241\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_34\",\"4\":\"0.3084318\"},{\"1\":\"10.40803\",\"2\":\"[50, 20, 10]\",\"3\":\"deeplearning_grid_01_model_13\",\"4\":\"0.3119789\"},{\"1\":\"10.40197\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_19\",\"4\":\"0.3121232\"},{\"1\":\"10.39822\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_16\",\"4\":\"0.3143242\"},{\"1\":\"10.39854\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_7\",\"4\":\"0.3197112\"},{\"1\":\"10.41176\",\"2\":\"[20, 20, 20]\",\"3\":\"deeplearning_grid_01_model_25\",\"4\":\"0.3216636\"},{\"1\":\"10.39094\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_28\",\"4\":\"0.3223630\"},{\"1\":\"10.40236\",\"2\":\"[10, 10, 10]\",\"3\":\"deeplearning_grid_01_model_10\",\"4\":\"0.3232177\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n---\n\n### 3. Visualize the trade of between the precision and the recall and the optimal threshold\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-5_155f125e08485fe55992719d01a2e3b8'}\n\n```{.r .cell-code}\ngbm_h2o <- h2o.loadModel(\"../../my_models/PerfMeasures_Models/GBM_4_AutoML_4_20230610_121831\")\n\ngbm_perf_h2o <- h2o.performance(gbm_h2o, newdata = test_h2o)\n\ngbm_perf_tbl <- gbm_perf_h2o %>% \n  h2o.metric() %>% \n  as_tibble()\n\ngbm_perf_tbl %>%\n  ggplot(aes(x = threshold)) +\n  geom_line(aes(y = precision), color = \"blue\", size = 1) +\n  geom_line(aes(y = recall), color = \"red\", size = 1) +\n  \n  # Insert line where precision and recall are harmonically optimized\n  geom_vline(xintercept = h2o.find_threshold_by_max_metric(gbm_perf_h2o, \"f1\")) +\n  labs(title = \"Precision vs Recall\", y = \"value\") +\n  theme_new\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n---\n\n### 4. ROC Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-6_7bc89e6da19c2706d9916f6c1993c458'}\n\n```{.r .cell-code}\nensamble_h2o <- h2o.loadModel(\"../../my_models/PerfMeasures_Models/StackedEnsemble_BestOfFamily_2_AutoML_4_20230610_121831\")\n\n# deeplearning_h2o %>% h2o.saveModel(\"../../my_models/PerfMeasures_Models/\", force = T)\n# gbm_h2o %>% h2o.saveModel(\"../../my_models/PerfMeasures_Models/\", force = T)\n# ensamble_h2o %>% h2o.saveModel(\"../../my_models/PerfMeasures_Models/\", force = T)\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"../../my_models/PerfMeasures_Models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n```\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-7_b7d80d9ef73cbd079a936f1ee5579296'}\n\n```{.r .cell-code}\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,5] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Models\"\n    )\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n---\n\n### 5. Precision vs Recall Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-8_4441f67635730e8c0b62ef343a4a4a7a'}\n\n```{.r .cell-code}\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,5] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n---\n\n### 6. Gain Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-9_7827673f2ec51220910207409b46772a'}\n\n```{.r .cell-code}\ngain_lift_tbl <- gbm_perf_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\n## Gain Chart\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n---\n\n### 7. Lift Plot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-10_9b0e8962515f4515ef6489e8ea675390'}\n\n```{.r .cell-code}\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n---\n\n### 8. Dashboard with Cowplot\n\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-11_e0e950e59b2a5af69ce53cfa5cadfcab'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"plot_h2o_performance definition\"}\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n```\n:::\n\n::: {.cell hash='05_performance_measures_cache/html/unnamed-chunk-12_76a81f12c8cc25775e2becf912796d7c'}\n\n```{.r .cell-code}\nautoml_models_h2o@leaderboard %>%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)\n```\n\n::: {.cell-output-display}\n![](05_performance_measures_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}