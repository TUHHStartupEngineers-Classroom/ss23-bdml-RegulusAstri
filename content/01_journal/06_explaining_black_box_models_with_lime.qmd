---
title: "Explaining Black-Box Models with LIME"
author: "Tommy Weber"
---

### Repeat of previous Sections

```{r}
#| message: false
#| warning: false
#| output: false
#| code-fold: true

# LIME FEATURE EXPLANATION ----

# 1. Setup ----

# Load Libraries 

library(h2o)
library(rsample)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)

# Load Data
employee_attrition_tbl <- read.csv("../../../employee_attrition.csv")

path_data_definitions <- "../../../data_definitions.xlsx"
definitions_raw_tbl   <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)

process_hr_data_readable <- function(data, definitions_tbl) {
  
  definitions_list <- definitions_tbl %>%
    fill(...1, .direction = "down") %>%
    filter(!is.na(...2)) %>%
    separate(...2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
    rename(column_name = ...1) %>%
    mutate(key = as.numeric(key)) %>%
    mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
    split(.$column_name) %>%
    map(~ select(., -column_name)) %>%
    map(~ mutate(., value = as_factor(value))) 
  
  for (i in seq_along(definitions_list)) {
    list_name <- names(definitions_list)[i]
    colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, "_value"))
  }
  
  data_merged_tbl <- list(HR_Data = data) %>%
    append(definitions_list, after = 1) %>%
    reduce(left_join) %>%
    select(-one_of(names(definitions_list))) %>%
    set_names(str_replace_all(names(.), pattern = "_value", 
                              replacement = "")) %>%
    select(sort(names(.))) %>%
    mutate_if(is.character, as.factor) %>%
    mutate(
      BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel", 
                                                      "Travel_Rarely", 
                                                      "Travel_Frequently"),
      MaritalStatus  = MaritalStatus %>% fct_relevel("Single", 
                                                     "Married", 
                                                     "Divorced")
    )
  
  return(data_merged_tbl)
  
}

employee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)

# Split into test and train
set.seed(seed = 1113)
split_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)

# Assign training and test data
train_readable_tbl <- training(split_obj)
test_readable_tbl  <- testing(split_obj)

# ML Preprocessing Recipe 
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
                step_zv(all_predictors()) %>%
                step_mutate_at(c("JobLevel", "StockOptionLevel"), fn = as.factor) %>% 
                prep()

recipe_obj

train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)

# 2. Models ----

h2o.init()

automl_leader <- h2o.loadModel("../../my_models/Attr_Model/StackedEnsemble_AllModels_3_AutoML_1_20230611_110811")
```

---

### Explanation

```{r}
#| message: false
#| warning: false
#| output: false

predictions_tbl <- automl_leader %>% 
  h2o.predict(newdata = as.h2o(test_tbl)) %>% 
  as_tibble() %>% 
  bind_cols(
    test_tbl %>% 
      select(Attrition, EmployeeNumber)
  )


explainer <- train_tbl %>% 
  select(-Attrition) %>% 
  lime(
    model = automl_leader,
    bin_continuous = TRUE,
    n_bins = 4,
    quantile_bins = TRUE
  )


explanation <- test_tbl %>% 
  slice(1:20) %>% 
  select(-Attrition) %>% 
  lime::explain(
    explainer = explainer,
    n_labels = 1,
    n_features = 8,
    n_permutations = 5000,
    kernel_width = 1.0
  )

```

---

### Challenge, Part 1

```{r}
#| message: false
#| warning: false
#| output: false

custom_plot_features <- function(explanation, case_id) {
  
  case_expl <- explanation %>% 
    filter(case == case_id) %>% 
    as_tibble() %>% 
    arrange(feature_weight %>% abs()) %>%
    mutate(feature_desc = as_factor(feature_desc)) %>% 
    mutate(is_support = feature_weight > 0)
  
  label <- case_expl$label[1]
  probability <- round(case_expl$label_prob[1], digits = 2)
  explanation_fit <- round(case_expl$model_r2[1], digits = 2)
  
  case_expl %>%   
    ggplot() +
    
    geom_col(aes(x = feature_desc, y = feature_weight, fill = is_support)) +
    
    coord_flip() +
    
    scale_fill_discrete(labels = c("Contradicts", "Supports")) +
    
    labs(
      subtitle = str_c(paste0("Case: ", case_id),
                       paste0("Label: ", label),
                       paste0("Probability: ", probability),
                       paste0("Explanation Fit: ", explanation_fit),
                       sep = "\n"),
      x = "Feature",
      y = "Weight"
    ) +
    
    theme(
      legend.title = element_blank(),
      legend.position = "bottom"
    )
}

```

```{r}

custom_plot_features(explanation, 8)

```

---

### Challenge, Part 2

```{r}
#| message: false
#| warning: false

explanation %>% 
  mutate(case = as_factor(case)) %>% 
  
  ggplot(aes(x = case, y = feature_desc, fill = feature_weight)) +
  
  geom_tile() +
  
  facet_wrap(vars(label)) +
  
  scale_fill_continuous(name = "Feature weight") +
  
  labs(
    x = "Case",
    y = "Feature",
  ) +
  
  theme(
    axis.text.x = element_text(angle=45, hjust=1),
    panel.grid = element_blank(),
    panel.border = element_rect(color = "black", fill = "transparent"),
    strip.background = element_blank(),
    strip.text = element_text(hjust = 0.0)
    )

```